service: rekon-api

frameworkVersion: '2'


provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  environment:
    S3_BUCKET: ${self:custom.bucket}
    DYNAMODB_TABLE: ${self:custom.dynamodb_table}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource: "arn:aws:s3:::${self:custom.bucket}/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.dynamodb_table}"
        - Effect: "Allow"
          Action:
            - "rekognition:DetectLabels"
          Resource: "*"

functions:
  get:
    handler: api.blob_get
    events:
      - http:
          path: blobs/{blob_id}
          method: get
          request:
            parameters:
              paths:
                blob_id: true
          documentation:
            summary: Gets Rekognition Labels
            tags:
              - rekon_Labels
            description: >
              GET method. to Retriver the Rekognition Labels basead in a blob_id

            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": BlobRetrieveResponse
  post:
    handler: api.blob_post
    events:
      - http:
          path: blobs
          method: post
          request:
            schema:
              application/json: ${file(models/blob_post_request.json)}
          documentation:
            summary: Post Rekognition Presigned URL
            tags:
              - presigned_url
            description: POST method. that return a presigned_url with 3600 second.
            requestModels:
               "application/json": BlobCreationRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": BlobCreationResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
  trigger_s3:
    handler: triggers.trigger_rekognition
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          existing: true
  trigger_dynamodb:
    handler: triggers.trigger_callback_url
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - blobTable
              - StreamArn

custom:
  bucket: "blob-presigned"
  dynamodb_table: "blobs"
  apiGatewayXray: true
  documentation:
    # this is general info about the API
    api:
      info:
        version: '2'
        title: Demor Rekognition
        description: API to get a presigned URL
        contact:
          name: Elison MÃ¡rcio Correa
          url: https://www.serverless.com/framework
          email: marcioinfo.correa@gmail.com
        license:
          name: The license
          url: https://github.com/marcioinfo/api-rekognition/tree/api
      tags:
        -
          name: demo
          description: staicase demo
    # Now we describe all the models that we use
    models:
      -
        name: BlobCreationRequest
        contentType: "application/json"
        schema: ${file(models/blob_post_request.json)}
      -
        name: BlobCreationResponse
        contentType: "application/json"
        schema: ${file(models/blob_post_response.json)}

      -
        name: BlobRetrieveResponse
        contentType: "application/json"
        schema: ${file(models/blob_get_response.json)}
      -
        name: BlobErrorResponse
        contentType: "application/json"
        schema: ${file(models/blob_error.json)}

  commonModelSchemaFragments:
    # defining common fragments means you can reference them with a single line
    MethodResponse400Json:
      statusCode: '400'
      responseModels:
        "application/json": BlobErrorResponse

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
              Id: CORSRuleId1
              MaxAge: '3600'
    blobTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb_table}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-aws-documentation
  - serverless-api-gateway-xray
